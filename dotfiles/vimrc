set nocompatible

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -k -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')
Plug 'junegunn/vim-plug'    " has vim-plug help
" No harm plugins from https://www.vi-improved.org/plugins/
Plug 'https://github.com/tpope/vim-abolish'
Plug 'https://github.com/tpope/vim-characterize'
Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/justinmk/vim-dirvish'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/ludovicchabant/vim-gutentags'
Plug 'https://github.com/tommcdo/vim-lion'
Plug 'https://github.com/romainl/vim-qf'
Plug 'https://github.com/romainl/vim-qlist'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/tpope/vim-rsi'
Plug 'https://github.com/tpope/vim-sensible'
Plug 'https://github.com/justinmk/vim-sneak'
Plug 'https://github.com/tpope/vim-speeddating'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/wellle/targets.vim'
Plug 'https://github.com/tomtom/ttags_vim'
Plug 'https://github.com/mbbill/undotree'
Plug 'https://github.com/ajh17/VimCompletesMe'
Plug 'https://github.com/tpope/vim-unimpaired'
" Autocomplete
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/tpope/vim-endwise'
" Build
Plug 'neomake/neomake'
" Editor
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/xtal8/traces.vim'
Plug 'https://github.com/chaoren/vim-wordmotion'
Plug 'https://github.com/fvictorio/vim-yank-queue'
" Formatting
Plug 'https://github.com/z0mbix/vim-shfmt', { 'for': 'sh' }
" Search
Plug 'https://github.com/mileszs/ack.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --no-update-rc' }
Plug 'junegunn/fzf.vim'
" Specific for Java
Plug 'https://github.com/akhaku/vim-java-unused-imports'
" Specific for Python
Plug 'https://github.com/nvie/vim-flake8'
Plug 'https://github.com/vim-scripts/indentpython.vim'
Plug 'https://github.com/tmhedberg/SimpylFold'
" Specific for Tmux
Plug 'https://github.com/tmux-plugins/vim-tmux'
Plug 'https://github.com/tmux-plugins/vim-tmux-focus-events'
" Version control
Plug 'https://github.com/airblade/vim-gitgutter'
" Visuals
Plug 'https://github.com/c9s/colorselector.vim'
Plug 'https://github.com/Konfekt/FastFold'
" Visuals - colorschemes
" Plug 'https://github.com/rafi/awesome-vim-colorschemes' " several schemes aggregated in one place
call plug#end()

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim settings

syntax on

" Leaders
let mapleader = ","
let maplocalleader = "\\"

" Basic options
set autoread
set backspace=indent,eol,start
set encoding=utf-8
set gcr=a:blinkon0  " Disable cursor blink
set history=1000  " Store lots of :cmdline history
set magic
" set number
set ruler
set showcmd
set showmatch  " show matching bracket
set showmode
set timeout timeoutlen=1500
set visualbell

" Editor - disable core Ex mode
nnoremap Q <nop>

" Editor - per directory vimrc config
set exrc

" Editor - Regular expression engine eg better for Ruby files
" Use new regex engine to get better performance in ruby files
set regexpengine=2

" File - Backup, swap etc.
set nobackup  " don't make automatic backups
set noswapfile
set nowritebackup

" File - Hidden
" This makes vim act like all other editors, buffers, modified or not,
" can exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Nav - Scrolling
set scrolloff=0  " keeps cursor away from top/bottom of screen
set sidescrolloff=4
set sidescroll=0

" Nav - Scrolling - Mouse scrolling in a terminal
set mouse=
map <ScrollWheelUp> <C-Y>
map <ScrollWheelDown> <C-E>

" Op - Undo
if has('persistent_undo') && !isdirectory(expand('~').'/.vim/undodir')
  silent !mkdir ~/.vim/undodir > /dev/null 2>&1
  set undodir=~/.vim/undodir
  set undofile
endif

" Text - Spell checking
" Configure the language and turn off spell checking:
set spell spelllang=en_ca
set nospell

" Text - Whitespace
filetype indent plugin on
set autoindent    " align the new line indent with the previous line
set endofline
set fileformat=unix
set linebreak     " break line at convenient points e.g. not in the middle of a word
set list listchars=tab:▸\ ,trail:·
set shiftround    " round indent to multiple of 'shiftwidth'
set smartindent
set smarttab
set nowrap
set wrapmargin=0
set wrapscan

" Text - Whitespace - indentation and tab size defaults
set expandtab     " insert spaces when hitting TABs
set tabstop=2     " a hard TAB displays as this num of columns
set softtabstop=2 " insert/delete this num of spaces when hitting a TAB/BACKSPACE
set shiftwidth=2  " operation >> indents this number of columns; << unindents
set textwidth=127 " lines with more columns than this will be broken
set colorcolumn=126

" View - Colors if you have vim >= 8 or Neovim >= 0.1.5
if has("gui_running")
  if (has("termguicolors"))
    set termguicolors
    set t_ut=
  endif
endif

" View - Cursor - Context-dependent cursor in the terminal
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7""

" View - Folding
set foldmethod=indent
set foldlevel=99
set foldnestmax=3
nnoremap <space> za

" View - Macro - Do not redraw when macros are executing:
set lazyredraw

" View - Theme
set t_Co=256
" colorscheme paramount
" colorscheme seoul256
colorscheme skyhawk
" colorscheme tone
" colorscheme twilight
" colorscheme twilight256

" View - Theme seoul256 options:
let g:seoul256_background = 234
set background=dark

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Base / vanilla shortcuts

" By https://www.vi-improved.org/recommendations/
nnoremap <leader>a :argadd <c-r>=fnameescape(expand('%:p:h'))<cr>/*<C-d>
nnoremap <leader>b :b <C-d>
nnoremap <leader>e :e **/
nnoremap <leader>g :grep<space>
nnoremap <leader>i :Ilist<space>
nnoremap <leader>j :tjump /
nnoremap <leader>m :make<cr>
nnoremap <leader>q :b#<cr>
nnoremap <leader>t :TTags<space>*<space>*<space>.<cr>

" Editor - quit
inoremap ;qq <ESC>:q

" File - open - gf - opens file under cursor in a new vertical split
nnoremap gf :vertical wincmd f<CR>

" File - save
nmap <leader>ww :w<CR>
inoremap ;ww <ESC>:w

" Nav - cd to current file dir
nnoremap <silent> <F4> :lchdir %:p:h<CR>:pwd<CR>

" Nav - lines - nav through long, wrapped lines with ease
nmap j gj
nmap k gk

" Nav - split panels with vim char motions
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Op - Copying
set pastetoggle=<F3>

" Op - Repeat also on visually selected lines
vnoremap . :norm.<CR>

" Search highlight clear
map <Leader><Space> :nohl<CR>

" Text - Insert - Completion
inoremap <silent> ;f <C-x><C-f>
inoremap <silent> ;i <C-x><C-i>
inoremap <silent> ;l <C-x><C-l>
inoremap <silent> ;n <C-x><C-n>
inoremap <silent> ;o <C-x><C-o>
inoremap <silent> ;t <C-x><C-]>
inoremap <silent> ;u <C-x><C-u>

" Text - Insert - upcase last typed word
inoremap ;uu <esc>viwUea

" Windows pane verticals resizing
nnoremap <silent> <Leader>[ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>] :exe "resize " . (winheight(0) * 2/3)<CR>

" Window splitting to be the same size
map <leader>= <C-w>=
imap <leader>= <Esc> <C-w>=

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto make dir

function! <SID>AutoMkdir() abort
  let l:dir = expand('<afile>:p:h')
  let l:file = expand('<afile>:t')
  if !isdirectory(l:dir)
    call mkdir(l:dir, 'p')
    silent execute 'bw ' . l:dir . '/' . l:file
    silent execute 'e ' . l:dir . '/' . l:file
  endif
endfunction

augroup AutoMkdir
  autocmd!
  autocmd BufWritePre,FileWritePre,BufNewFile *
    \ call <SID>AutoMkdir()
augroup END

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nav - Quickfix window

" Auto open
augroup autoquickfix
  autocmd!
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost    l* lwindow
augroup END

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search - Ag silversearcher via Ack.vim

" Shortcuts for Ack.vim and Ag silversearcher
map <leader>a :Ack!<Space>
nmap <leader>b :Buffers<CR>
nmap <leader>t :Files<CR>

if executable("ag")
  " Ack.vim invoked by typing ag, case insensitive:
  cnoreabbrev ag Ack!
  cnoreabbrev aG Ack!
  cnoreabbrev Ag Ack!
  cnoreabbrev AG Ack!

  " Ack.vim program change to Ag silversearcher
  let g:ackprg = 'ag --vimgrep --smart-case'

  " Default grep override
  set grepprg=ag\ --nogroup\ --nocolor\ --smart-case\ --column
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search - fzf - fuzzy finder

let g:fzf_tags_command = 'ctags --extra=+f -R'
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search - Vanilla

set hlsearch
set incsearch

" Ignore case unless we type a capital
set ignorecase
set smartcase

set wildmenu
" Don't offer to open certain files/directories
set wildignore+=*.bak
set wildignore+=*~,.*~
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.dat,*.out
set wildignore+=*.exe,*.dll
set wildignore+=*.pdf,*.psd
set wildignore+=*.pyc
set wildignore+=*.so
set wildignore+=*stackdump
set wildignore+=*.swo,*.swp,tags,tags.lock
set wildignore+=*.\(zip\|7z\|bz2\|gz\|tar\|xz\|[zZ]\)
set wildignore+=[Dd]esktop.ini
set wildignore+=node_modules/*,bower_components/*
set wildignore+=.\(git\|hg\|svn\)
set wildignore+=.idea,*.sublime-project,*.sublime-workspace,.vscode
set wildignore+=.kitchen

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text - Whitespace

" BadWhitespace definition:
highlight BadWhitespace ctermbg=red guibg=darkred

" BadWhitespace opening file:
au BufRead,BufNewFile *.py,*.pyw,*.rb,*.c,*.h match BadWhitespace /\s\+$/

" Strip trailing whitespace function
nnoremap <leader>s :call StripTrailingWhitespace()<cr>
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" View - Focus

augroup active_relative_number
    au!
    au BufEnter * :setlocal number relativenumber
    au WinEnter * :setlocal number relativenumber
    au BufLeave * :setlocal nonumber norelativenumber
    au WinLeave * :setlocal nonumber norelativenumber
augroup END

set cursorline

augroup highlight_follows_focus
  autocmd!
  autocmd WinEnter * set cursorline
  autocmd WinLeave * set nocursorline
augroup END

augroup highlight_follows_vim
  autocmd!
  autocmd FocusGained * set cursorline
  autocmd FocusLost * set nocursorline
augroup END

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" View - GUI - Graphical User Interface Vim

if has("gui_running")
  " GUI is running or is about to start.
  set background=dark
  set gfn=Fira\ Code\ 11
  set lines=999 columns=140
endif

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Viewports - windows

" :H topic will open an 80 columns vertical split
command! -complete=help -nargs=1 H call VerticalHelp(<f-args>)
function! VerticalHelp(topic)
  execute "vertical botright help " . a:topic
  execute "vertical resize 78"
endfunction

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin commentary.vim
" commentstring is the variable dedicated to the vim-commentary plugin.

autocmd FileType apache setlocal commentstring=#\ %s

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin EditorConfig

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Python folding SimpylFold

let g:SimpylFold_docstring_preview = 1

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Ruby Seeing is Believing +shortcuts

" Annotate every line
nmap <leader>b :%!seeing_is_believing --timeout 12 --line-length 500 --number-of-captures 300 --alignment-strategy chunk<CR>;

" Annotate marked lines
nmap <leader>n :%.!seeing_is_believing --timeout 12 --line-length 500 --number-of-captures 300 --alignment-strategy chunk --xmpfilter-style<CR>;

" Remove annotations
nmap <leader>c :%.!seeing_is_believing --clean<CR>;

" Mark the current line for annotation
nnoremap <leader>m A # => <Esc>

" Mark the highlighted lines for annotation
vnoremap <leader>m :norm A # => <Esc>

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Shfmt - Shell formatting, ex command is 'Shfmt'

" Use two spaces indentation by default:
let g:shfmt_extra_args = '-i 2'

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Specific conf for filetypes
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" File entensions vs Syntax map
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
au BufRead,BufNewFile Jenkinsfile set ft=groovy
au BufRead,BufNewFile *.coffee set ft=coffee
au BufNewFile,BufRead {*.json,*.es6} set ft=javascript
au BufNewFile,BufRead {*.lr} set ft=markdown
au BufRead,BufNewFile {*.mustache,*.hbs} set ft=mustache
au BufRead,BufNewFile *.twig,*.tpl set ft=htmljinja

au FileType {javascript,css,typescript,mustache,htmljinja,html}
  \ setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2 textwidth=120 colorcolumn=119

au FileType make setlocal noexpandtab

au FileType markdown
  \ setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80 colorcolumn=79

" Python
au BufNewFile,BufRead *.py
  \ setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4 textwidth=80 colorcolumn=79

au FileType {ruby,cucumber,yaml,sass,scss,eruby,less}
  \ setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2 textwidth=100 colorcolumn=99

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
